```
#include <esp_now.h>
#include <WiFi.h>

#include "DHT.h"
#define DHTPIN 4 
#define DHTTYPE DHT11
DHT dht(DHTPIN, DHTTYPE);

////////////////////////////////////////////////////////
const char* ssid     = "Syed-kazmi";
const char* password = "syedkazmi";

const char* ntpServer = "pool.ntp.org";
const long  gmtOffset_sec = 5*3600;
const int   daylightOffset_sec = 0;
///////////////////////////////////////////////////////



// REPLACE WITH YOUR RECEIVER MAC Address
uint8_t broadcastAddress[] = {0x24, 0xD7, 0xEB, 0x15, 0xA6, 0x90};
//Mac Address 24:D7:EB:15:A6:90
// Structure example to send data
// Must match the receiver structure
typedef struct struct_message {
  int b;
  float c;
  char timeInfo[50]; // Variable to store time information
} struct_message;

// Create a struct_message called myData
struct_message myData;

esp_now_peer_info_t peerInfo;

// callback when data is sent
void OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status) {
  Serial.print("\r\nLast Packet Send Status:\t");
  Serial.println(status == ESP_NOW_SEND_SUCCESS ? "Delivery Success" : "Delivery Fail");
}
 
void setup() {
  // Init Serial Monitor
  Serial.begin(115200);


//////////////////////////////////////////////////////////////
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.println("WiFi connected.");
  configTime(gmtOffset_sec, daylightOffset_sec, ntpServer);
  printLocalTime();
  WiFi.disconnect(true);
  WiFi.mode(WIFI_OFF);
//////////////////////////////////////////////////////////////
 
  // Set device as a Wi-Fi Station
  WiFi.mode(WIFI_STA);

  // Init ESP-NOW
  if (esp_now_init() != ESP_OK) {
    Serial.println("Error initializing ESP-NOW");
    return;
  }

  // Once ESPNow is successfully Init, we will register for Send CB to
  // get the status of Trasnmitted packet
  esp_now_register_send_cb(OnDataSent);
  
  // Register peer
  memcpy(peerInfo.peer_addr, broadcastAddress, 6);
  peerInfo.channel = 0;  
  peerInfo.encrypt = false;
  
  // Add peer        
  if (esp_now_add_peer(&peerInfo) != ESP_OK){
    Serial.println("Failed to add peer");
    return;
  }

  dht.begin();
}
 
void loop() {
  
        float humidity = dht.readHumidity(); // Read humidity from DHT sensor
        float temperature = dht.readTemperature(); // Read temperature from DHT sensor

        // Check if any reads failed and exit early (to try again)
        if (isnan(humidity) || isnan(temperature)) {
            Serial.println("Failed to read from DHT sensor!");
            return;
        }

        Serial.print("Temperature: ");
        Serial.print(temperature);
        Serial.print(" Â°C, Humidity: ");
        Serial.print(humidity);
        Serial.println(" %");




        // Set values to send
  
  myData.b = temperature;
  myData.c = humidity;

///////////////////////////////////////////////////////////
// Get and store time information
  getTimeInfo(myData.timeInfo, sizeof(myData.timeInfo));
////////////////////////////////////////////////////////////    
 
  
  // Send message via ESP-NOW
  esp_err_t result = esp_now_send(broadcastAddress, (uint8_t *) &myData, sizeof(myData));
   
  if (result == ESP_OK) {
    Serial.println("Sent with success");
  }
  else {
    Serial.println("Error sending the data");
  }

  printLocalTime();
  delay(2000);


}

///////////////////////////////////////////////////////////////////////
void getTimeInfo(char* buffer, size_t bufferSize){
  struct tm timeinfo;
  if(!getLocalTime(&timeinfo)){
    Serial.println("Failed to obtain time");
    return;
  }
  strftime(buffer, bufferSize, "%A, %B %d %Y %H:%M:%S", &timeinfo);
   Serial.println(&timeinfo, "%A, %B %d %Y %H:%M:%S");
}
//////////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////////////
void printLocalTime(){
  struct tm timeinfo;
  if(!getLocalTime(&timeinfo)){
    Serial.println("Failed to obtain time");
    return;
  }
  Serial.println(&timeinfo, "%A, %B %d %Y %H:%M:%S");
  Serial.println();
}
////////////////////////////////////////////////////////////////////////////



//Mac Address 24:D7:EB:15:A6:90


```
